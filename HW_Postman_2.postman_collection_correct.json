{
	"info": {
		"_postman_id": "563592e2-f82f-486e-a517-139501033221",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21462284"
	},
	"item": [
		{
			"name": "HW_Postman_2_task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_Postman_2_Task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json",
							"",
							"//  pm.test(\"Your test name\", function () {",
							"    let jsonData = pm.response.json();",
							"//      pm.expect(jsonData.value).to.eql();",
							"// });",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками)",
							"",
							"pm.test(\"Check the name\", function() {",
							"    pm.expect(jsonData.name).to.include(\"Andry\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками)",
							"",
							"pm.test(\"Check the age\", function() {",
							"    pm.expect(jsonData.age).to.include(35);",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками)",
							"",
							"pm.test(\"Check the salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(1500);",
							"});",
							"",
							"// 7. Спарсить request",
							"",
							"let reqData = request.data;",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request)",
							"",
							"pm.test(\"Сheck the name in response\", function() {",
							"    pm.expect(jsonData.name).to.eql(reqData.name);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request)",
							"",
							"pm.test(\"Check the age in respons\", function() {",
							"    pm.expect(jsonData.age).to.eql(reqData.age);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request)",
							"",
							"pm.test(\"Check the salary in respons\", function() {",
							"    pm.expect(jsonData.salary).to.eql(Number(reqData.salary));",
							"})",
							"",
							"// 11. Вывести в консоль параметр family из response",
							"",
							"console.log(jsonData.family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.test(\"Check equality\", function() {",
							"    pm.expect(Number(jsonData.u_salary_1_5_year)).to.eql(reqData.u_salary_1_5_year*4)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Andry",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_Postman_2_Task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json",
							"",
							"let reqData = pm.response.json();",
							"",
							"// 4. Спарсить request",
							"",
							"let jsonData = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)",
							"",
							"pm.test(\"Check the name\", () => {",
							"    pm.expect(jsonData.name).to.eql(reqData.name)",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request)",
							"",
							"pm.test(\"Check the age\", () => {",
							"    pm.expect(jsonData.age).to.eql(reqData.age)",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request)",
							"",
							"pm.test(\"Check the salary\", () => {",
							"    pm.expect(Number(jsonData.salary)).to.eql(Number(reqData.salary))",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response",
							"",
							"console.log(jsonData.family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name",
							"",
							"pm.test(\"Check the name dog\", function() {",
							"    pm.expect(reqData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age",
							"",
							"pm.test(\"Check the name age\", function() {",
							"    pm.expect(reqData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky",
							"",
							"pm.test(\"Check the name Lucky\", function() {",
							"    pm.expect(reqData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4",
							"",
							"pm.test(\"Check the age = 4\", function() {",
							"    pm.expect(reqData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=35&name=Andry&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "name",
							"value": "Andry"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_Postman_2_Task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"",
							"let reqData = pm.response.json();",
							"",
							"// 4. Спарсить request",
							"",
							"let jsonData = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)",
							"",
							"pm.test(\"Check the name\", () => {",
							"    pm.expect(jsonData.name).to.eql(reqData.name)",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request)",
							"",
							"pm.test(\"Check the name\", () => {",
							"    pm.expect(jsonData.age).to.include(reqData.age)",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request",
							"",
							"console.log(reqData.salary);",
							"",
							"// 8. Вывести в консоль параметр salary из response",
							"",
							"console.log(jsonData.salary);",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response",
							"",
							"console.log(jsonData.salary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"",
							"console.log(jsonData.salary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(jsonData.salary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)",
							"pm.test(\"Check the zero in the salary\", () => {",
							"    pm.expect(reqData.salary[0]).to.eql(Number(jsonData.salary))",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)",
							"",
							"pm.test(\"Check the one element = salary*2\", () => {",
							"    pm.expect(Number(reqData.salary[1])).to.eql(jsonData.salary*2)",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)",
							"",
							"pm.test(\"Check the two element = salary*3\", () => {",
							"    pm.expect(Number(reqData.salary[2])).to.eql(jsonData.salary*3)",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 18. Передать в окружение переменную name",
							"",
							"pm.environment.set(\"name\", \"Andry\");",
							"",
							"// 16. Создать в окружении переменную age",
							"// 19. Передать в окружение переменную age",
							"",
							"pm.environment.set(\"age\", \"35\");",
							"",
							"// 17. Создать в окружении переменную salary",
							"// 20. Передать в окружение переменную salary",
							"",
							"pm.environment.set(\"salary\", \"1500\");",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"",
							"pm.test(\"cycle\", function() {",
							"    let salary = jsonData.salary;",
							"    for (let i = 0; i < salary.length; i++)",
							"    console.log(jsonData.salary[i])",
							"});",
							"",
							"// for (i = 0; i < resp_salary.length; i++) {",
							"//     console.log(resp_data.salary[i])",
							"// };"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andry&age=35&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andry"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_Postman_2_Task_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"",
							"pm.variables.get(\"salary\");",
							"",
							"// 2. Вставить параметр age из окружения в age",
							"",
							"pm.variables.get(\"age\");",
							"",
							"// 3. Вставить параметр name из окружения в name",
							"",
							"pm.variables.get(\"name\");",
							"",
							"// 4. Отправить запрос",
							"// 5. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json",
							"",
							"let jsonData = pm.response.json();",
							"",
							"// 7. Спарсить request",
							"",
							"let reqData = request.data;",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"",
							"pm.test(\"Chech the response has a parameter - start_qa_salary\", function () {",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"",
							"pm.test(\"Chech the response has a parameter - qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"Chech the response has a parameter - qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"Chech the response has a parameter - qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")",
							"});",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"Chech the response has a parameter - qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"Chech the response has a parameter - person\", function () {",
							"    pm.expect(jsonData).to.have.property(\"person\")",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)",
							"",
							"pm.test (\"Check the parameter start_qa_salary has = salary from request\", function() {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(reqData.salary))",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)",
							"",
							"pm.test(\"Check the parameter qa_salary_after_6_month = salary*2\", function() {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary*2)",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)",
							"",
							"pm.test(\"Check the parameter qa_salary_after_12_months = salary*2.7\", function() {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.7)",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)",
							"",
							"pm.test(\"Check the parameter qa_salary_after_1.5_year = salary*3.3\", function() {",
							"    pm.expect(jsonData[`qa_salary_after_1.5_year`]).to.eql(reqData.salary*3.3)",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)",
							"",
							"pm.test(\"Check the parameter qa_salary_after_3.5_years = salary*3.8\", function() {",
							"    pm.expect(jsonData[`qa_salary_after_3.5_years`]).to.eql(Number(reqData.salary)*3.8)",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)",
							"",
							"pm.test(\"Check the parameter person has one elemente u_name = salary from request\", function() {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary)",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)",
							"",
							"pm.test(\"Check the parameter u_name = age from request\", function() {",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqData.age)",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)",
							"",
							"pm.test(\"Check the parameter u_salary_5_years = salary*4.2\", function() {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqData.salary*4.2)",
							"});",
							"",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person",
							"",
							"pm.test(\"cycle\", function() {",
							"    let person = jsonData.person;",
							"    for (let i = 0; i < person.length; i++)",
							"    console.log(jsonData.person[i])",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andry",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}