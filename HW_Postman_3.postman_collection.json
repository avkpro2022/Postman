{
	"info": {
		"_postman_id": "ea957b14-0b55-47e2-a1b8-eaf91d39ac06",
		"name": "HW_Postman_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21462284"
	},
	"item": [
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы",
							"// проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться",
							"// в зависимости от значения в Salary.",
							"",
							"",
							"",
							"const respSalary = pm.response.json().salary",
							"",
							"const reqSalary = +pm.request.url.query.get('salary')",
							"",
							"respSalary.forEach((salary, index) => {",
							"    pm.test(`${reqSalary} * ${index*1} === ${salary}`, () => {",
							"        pm.expect(reqSalary*(index+1)).to.eql(+salary)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andrei&age=35&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrei"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Преобразовать задания 5-7 (сравнить идентичные",
							"// поля",
							"// в реквесте и респонсе) таким образом, чтобы это",
							"// делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ!",
							"// (глубокое сравнение объектов)",
							"",
							"const reqObject = pm.request.url.query.toObject()",
							"const respObject = {",
							"    age: String(pm.response.json().age),",
							"    name: pm.response.json().name,",
							"    salary: String(pm.response.json().salary)",
							"}",
							"",
							"pm.test(\"Compare request Object and respons Object\", () => {",
							"    pm.expect(reqObject).to.deep.eql(respObject)",
							"})",
							"",
							"const jsonData = pm.response.json()",
							"",
							"const resp = {};",
							"for(const key in reqObject) {",
							"    resp[key] = isNaN(jsonData[key]) ? jsonData[key] : +jsonData[key]",
							"    reqObject[key] = isNaN(reqObject[key]) ? jsonData[key] : +reqObject[key]",
							"}",
							"",
							"pm.test(\"2.0 Compare request Object and respons Object\", () => {",
							"    pm.expect(reqObject).to.deep.eql(resp)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrei&age=35&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrei"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)",
							"",
							"// ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)",
							"",
							"// *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.",
							"",
							"const keyisInJson = [\"start_qa_salary\", \"qa_salary_after_6_months\", \"qa_salary_after_3.5_years\", \"qa_salary_after_12_months\", \"qa_salary_after_1.5_year\", \"person\"]",
							"let resp = pm.response.json()",
							"",
							"keyisInJson.forEach(key => {",
							"    pm.test(`Response has ${key}`, () => {",
							"        pm.expect(resp).to.have.property(key)",
							"    })",
							"})",
							"",
							"const salary = pm.environment.get(\"salary\")",
							"const counters = {",
							"  \"start_qa_salary\": 1,",
							"  \"qa_salary_after_6_months\": 2,",
							"  \"qa_salary_after_3.5_years\": 3.8,",
							"  \"qa_salary_after_12_months\": 2.7,",
							"  \"qa_salary_after_1.5_year\": 3.3",
							"}",
							"",
							"for(const key in counters) {",
							"   pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {",
							"       pm.expect(+resp[key]).to.eql(salary*counters[key])",
							"   })",
							"}",
							"",
							"counters['person'] = ''",
							"for(const key in counters) {",
							"    pm.test(`Response has ${key}`, () => {",
							"        pm.expect(resp).to.have.property(key)",
							"    })",
							"    if(key != 'person') {",
							"      pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {",
							"       pm.expect(+resp[key]).to.eql(salary*counters[key])",
							"   })",
							"}",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrei",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}